<div class="inbox">
  <div class="wrapper">
    <table>
      <thead>
        <tr>
          <th><input type="checkbox" id="select-all" /></th>
          <!-- Select all checkbox -->
          <th class="sender-recipient">Sender</th>
          <th>Content</th>
          <th>Time</th>
        </tr>
      </thead>
      <tbody id="email-list">
        <!-- Email list will be dynamically populated -->
      </tbody>
    </table>

    <div class="pagination" id="pagination"></div>
    <button id="delete-selected" style="display: none">Delete Selected</button>
  </div>
</div>

<script>
  const cookie = JSON.parse(document.cookie.replace("user=", ""));
  const tableBody = document.querySelector("#email-list");
  const pagination = document.querySelector("#pagination");
  const deleteButton = document.querySelector("#delete-selected");
  let selectedEmails = [];

  // Function to fetch and display emails with pagination
  function fetchEmails(page = 1) {
    fetch(`/get/email/received-email/${cookie.userId}?page=${page}`)
      .then((res) => res.json())
      .then((data) => {
        let tableData = "";
        data.emails.forEach((row) => {
          const time = new Date(row.sent_at);
          tableData += `
                        <tr>
                            <td><input type="checkbox" class="email-checkbox" value="${
                              row.emailId
                            }"></td>
                            <td class="sender-recipient">${row.sender}</td>
                            <td>
                                <div class="subject">
                                    <a href="/email-detail/${row.emailId}">${
            row.subject || "No subject"
          }</a>
                                </div>
                                <div class="body">${row.body}</div>
                            </td>
                            <td>${time.toLocaleString("en-us", {
                              month: "short",
                              day: "numeric",
                              year: "numeric",
                            })}</td>
                        </tr>
                    `;
        });

        tableBody.innerHTML = tableData;

        // Update pagination links
        let paginationLinks = "";
        for (let i = 1; i <= data.totalPages; i++) {
          paginationLinks += `<a href="javascript:void(0);" onclick="fetchEmails(${i})" class="${
            i === data.currentPage ? "active" : ""
          }">${i}</a>`;
        }
        pagination.innerHTML = paginationLinks;

        // Show or hide delete button based on selection
        const checkboxes = document.querySelectorAll(".email-checkbox");
        checkboxes.forEach((checkbox) => {
          checkbox.addEventListener("change", () => {
            selectedEmails = Array.from(checkboxes)
              .filter((checkbox) => checkbox.checked)
              .map((checkbox) => checkbox.value);
            deleteButton.style.display =
              selectedEmails.length > 0 ? "block" : "none";
          });
        });
      });
  }

  // Delete selected emails
  deleteButton.addEventListener("click", () => {
    if (selectedEmails.length > 0) {
      fetch("/delete-emails", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({ emailIds: selectedEmails }),
      })
        .then((res) => res.json())
        .then((response) => {
          if (response.success) {
            fetchEmails(); // Refresh email list after deletion
            selectedEmails = []; // Clear selected emails
            deleteButton.style.display = "none";
          } else {
            alert("Failed to delete emails.");
          }
        });
    }
  });

  // Select/Deselect all emails
  document.querySelector("#select-all").addEventListener("change", (event) => {
    const checkboxes = document.querySelectorAll(".email-checkbox");
    checkboxes.forEach((checkbox) => (checkbox.checked = event.target.checked));
    selectedEmails = event.target.checked
      ? Array.from(checkboxes).map((checkbox) => checkbox.value)
      : [];
    deleteButton.style.display = selectedEmails.length > 0 ? "block" : "none";
  });

  // Initial fetch of emails
  fetchEmails();
</script>
